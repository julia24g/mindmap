# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/graphql-server

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/graphql-server/package-lock.json
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test

  integration-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/graphql-server
    needs: build

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          cache-dependency-path: backend/graphql-server/package-lock.json
      - name: Ensure Docker is available
        run: |
          echo "Checking Docker availability"
          docker info
      - name: Testcontainers debug info
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          node -e "console.log('can require testcontainers:', !!(function(){try{require('testcontainers');return true}catch(e){return false}})())"
          echo "Environment vars relevant to testcontainers:"
          env | grep -i "DOCKER\|TESTCONTAINERS\|CI" || true
      - name: Install dependencies
        run: npm ci
      - name: Run integration tests (Testcontainers)
        env:
          # enable verbose debug logs for testcontainers
          DEBUG: "testcontainers*"
          # allow testcontainers to reuse existing Docker environment if needed
          # (set here but can be overridden in logs)
          TESTCONTAINERS_RYUK_DISABLED: "true"
        run: npm run test:integration

  # Alternative job that runs the integration tests against a Docker-in-Docker service.
  # Use this if the runner can't reach a local Docker socket; it starts a docker:dind
  # service and points DOCKER_HOST at tcp://localhost:2375 so Testcontainers can use it.
  integration-tests-dind:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/graphql-server
    needs: build
    env:
      # point docker client at the DinD service
      DOCKER_HOST: tcp://localhost:2375
      # disable TLS for the DinD service (recommended for GitHub Actions DinD)
      DOCKER_TLS_CERTDIR: ""

    services:
      docker:
        image: docker:24-dind
        options: --privileged
        env:
          DOCKER_TLS_CERTDIR: ""

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          cache-dependency-path: backend/graphql-server/package-lock.json
      - name: Wait for DinD Docker to be ready
        run: |
          echo "Checking Docker (DinD) availability via DOCKER_HOST=${DOCKER_HOST}"
          # give the Daemon a few seconds to start
          for i in {1..20}; do
            docker info && break || sleep 1
          done
      - name: Install dependencies
        run: npm ci
      - name: Run integration tests (Testcontainers, DinD)
        env:
          DEBUG: "testcontainers*"
          TESTCONTAINERS_RYUK_DISABLED: "true"
        run: npm run test:integration
